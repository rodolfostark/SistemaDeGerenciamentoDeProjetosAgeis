{"ast":null,"code":"import _defineProperty from \"/home/gilvandro/Downloads/SistemaDeGerenciamentoDeProjetosAgeis/projeto/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport store from 'store';\n\nclass Database {\n  constructor() {\n    if (!store.get('tasks')) {\n      store.set('tasks', {});\n    }\n  }\n\n  newProject(projectId, project) {\n    const oldProjects = store.get('projects');\n    store.set('projects', _objectSpread({}, oldProjects, {\n      [projectId]: project\n    }));\n  }\n\n  newTaks(projectId, tasks) {\n    const allTasks = store.get('tasks');\n    const currentTasks = allTasks[projectId] ? allTasks[projectId] : {};\n    store.set('tasks', _objectSpread({}, allTasks, {\n      [projectId]: _objectSpread({}, currentTasks, {\n        tasks\n      })\n    }));\n  }\n\n}\n\nconst db = new Database();\nexport default db;","map":{"version":3,"sources":["/home/gilvandro/Downloads/SistemaDeGerenciamentoDeProjetosAgeis/projeto/src/lib/db.js"],"names":["store","Database","constructor","get","set","newProject","projectId","project","oldProjects","newTaks","tasks","allTasks","currentTasks","db"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AACZ,QAAI,CAACF,KAAK,CAACG,GAAN,CAAU,OAAV,CAAL,EAAyB;AACvBH,MAAAA,KAAK,CAACI,GAAN,CAAU,OAAV,EAAmB,EAAnB;AACD;AACF;;AAEDC,EAAAA,UAAU,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AAC7B,UAAMC,WAAW,GAAGR,KAAK,CAACG,GAAN,CAAU,UAAV,CAApB;AACAH,IAAAA,KAAK,CAACI,GAAN,CAAU,UAAV,oBAA2BI,WAA3B;AAAwC,OAACF,SAAD,GAAaC;AAArD;AACD;;AAEDE,EAAAA,OAAO,CAACH,SAAD,EAAYI,KAAZ,EAAmB;AACxB,UAAMC,QAAQ,GAAGX,KAAK,CAACG,GAAN,CAAU,OAAV,CAAjB;AACA,UAAMS,YAAY,GAAGD,QAAQ,CAACL,SAAD,CAAR,GAAsBK,QAAQ,CAACL,SAAD,CAA9B,GAA4C,EAAjE;AACAN,IAAAA,KAAK,CAACI,GAAN,CAAU,OAAV,oBAAwBO,QAAxB;AAAkC,OAACL,SAAD,qBAAkBM,YAAlB;AAAgCF,QAAAA;AAAhC;AAAlC;AACD;;AAhBY;;AAmBf,MAAMG,EAAE,GAAG,IAAIZ,QAAJ,EAAX;AACA,eAAeY,EAAf","sourcesContent":["import store from 'store';\n\nclass Database {\n  constructor() {\n    if (!store.get('tasks')) {\n      store.set('tasks', {});\n    }\n  }\n\n  newProject(projectId, project) {\n    const oldProjects = store.get('projects');\n    store.set('projects', { ...oldProjects, [projectId]: project });\n  }\n\n  newTaks(projectId, tasks) {\n    const allTasks = store.get('tasks');\n    const currentTasks = allTasks[projectId] ? allTasks[projectId] : {}; \n    store.set('tasks', { ...allTasks, [projectId]: { ...currentTasks, tasks } });\n  }\n}\n\nconst db = new Database();\nexport default db;"]},"metadata":{},"sourceType":"module"}