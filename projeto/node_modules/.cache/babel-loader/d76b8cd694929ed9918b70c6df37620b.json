{"ast":null,"code":"var _jsxFileName = \"/home/gilvandro/Downloads/SistemaDeGerenciamentoDeProjetosAgeis/projeto/src/containers/Home.js\";\nimport React from 'react';\nimport store from 'store';\nimport ProjectCard from '../components/ProjectCard';\nimport Header from '../components/Header';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport axios from 'axios';\n/* \n Esse são objetos fake simulando um dado que vem direto do banco\n Quando fizermos a request para listar os projetos iremos \n receber um json vindo da API com um formato similar\n*/\n\nconst projectsFake = [{\n  projectId: '1',\n  name: 'Ifood App',\n  description: 'simple app',\n  contributors: ['gilvandro', '4235', '454'],\n  managers: ['admin'],\n  started: '10/02/2019',\n  finish: '10/12/2019',\n  imageUrl: 'https://specials-images.forbesimg.com/imageserve/5db9cc76d85e3000078fb931/960x0.jpg?fit=scale'\n}, {\n  projectId: '2',\n  name: 'Desktop App',\n  contributors: ['8989', '44'],\n  description: 'simple software',\n  managers: ['admin'],\n  started: '11/06/2019',\n  finish: '11/10/2019',\n  imageUrl: 'https://www.clicdata.com/wp-content/uploads/2019/06/example-dashboard-014-1.png'\n}, {\n  projectId: '3',\n  name: 'Web site',\n  contributors: ['8989', '44'],\n  description: 'simple software',\n  managers: ['admin'],\n  started: '11/06/2019',\n  finish: '11/10/2019',\n  imageUrl: 'https://www.clicdata.com/wp-content/uploads/2019/06/example-dashboard-014-1.png'\n}];\n\nconst fetchProjects = url => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(projectsFake);\n    }, 500);\n  });\n}; // Component que representa a página por complete\n// Ele está na pasta de containers pois é uma nomenclatura que \n// o pessoal usa, poderia ser /pages/Home.js  /screens/Home.js\n\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props); // O estado inicial do component o valor default que inicializa com um array vazio\n    // quando carregarmos nossa página e fizermos uma request iremos \n    // atualizar esse estado pois quando atualizamos um estado de um component react\n    // automaticamente o método render irá ser atualizado\n    // ele começa vazio se alguem atualiza o estado a parte do template é atualizada diretamente\n\n    this.setProject = projects => {\n      this.setState({\n        projects\n      });\n    };\n\n    this.redirect = projectId => () => {\n      this.props.history.push(\"/project/\".concat(projectId));\n    };\n\n    this.logout = () => {\n      store.set('logged-token', '');\n      store.get('logged-user', '');\n      this.props.history.push('/');\n    };\n\n    this.state = {\n      projects: []\n    };\n  }\n  /*\n   esse método é um método do lifecylce de um componente react\n   após nossa página carregar faça uma request\n   atualize o state com os projetso que estamos listando que estão chegando na request\n  */\n\n\n  componentDidMount() {\n    /* \n      usamos o uma função fake que simula o axios que é uma lib que faz request\n      teremos que usar axios para fazere request aqui dessa forma\n      axios.get('https://minhaapi.com/api/v2/projects')\n        .then(response => {\n          this.setProject(response);\n        }).catch((e) => {\n        // caso a request dê errado apareça erro\n        console.log('-->>', e)\n      });\n        axios para fazer request ele retorna uma promise\n      axios é uma lib que nos ajuda a fazer request simples até mais complexas\n    */\n    fetchProjects('https://minhaapi.com/api/v2/projects').then(response => {\n      const me = store.get('logged-user');\n      /* \n        como não temos API estamos fazendo no frontend uma filtragem caso o user seja admin ele\n        pode ver todos\n        caso não seja admi ele pode ver apenas o projeto onde ele é contribuidor\n         essa lógica pode ser feita no backend o cara poe fazer um query,\n        podemos passar o username do user logado e no backend fica essa lógica\n        mas para facilitar no frontend podemos fazer já que é um protótipo\n      */\n\n      if (me !== 'admin') {\n        const filteredData = response.filter(p => {\n          return p.contributors.includes(me);\n        });\n        this.setProject(filteredData);\n      } else {\n        this.setProject(response);\n      }\n    }).catch(e => {\n      // caso a request dê errado apareça erro\n      console.log('-->>', e);\n    });\n  }\n  /* \n    atualiza o estado da página home\n    logo em seguida os projetos são listados no método render\n  */\n\n\n  /*\n    faz a chamada do component Header passando um callback logout para quando clicarem lá no componentn Header\n    redirecionar para fora e limpar as credenciais\n     Container é um componente que centraliza e dentro dele tem a listagem com cada card\n    ProjectCard é o card que recebe os dados do projeto e exibe o titulo, imagem, participantes, descição\n    data de entrega do projeto\n  */\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(Header, {\n      logout: this.logout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(Container, {\n      maxWidth: \"sm\",\n      className: \"home-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, this.state.projects.map(project => {\n      return React.createElement(ProjectCard, Object.assign({}, project, {\n        redirect: this.redirect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }));\n    }))));\n  }\n\n}\n/**\n * exportamos para quem quiser importar ver esse component\n * estamos importando  ele em App.js que é onde tem as rotas configuradas\n */\n\n\nexport default Home;","map":{"version":3,"sources":["/home/gilvandro/Downloads/SistemaDeGerenciamentoDeProjetosAgeis/projeto/src/containers/Home.js"],"names":["React","store","ProjectCard","Header","CssBaseline","Container","axios","projectsFake","projectId","name","description","contributors","managers","started","finish","imageUrl","fetchProjects","url","Promise","resolve","reject","setTimeout","Home","Component","constructor","props","setProject","projects","setState","redirect","history","push","logout","set","get","state","componentDidMount","then","response","me","filteredData","filter","p","includes","catch","e","console","log","render","map","project"],"mappings":"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","sourcesContent":["import React from 'react';\nimport store from 'store';\nimport ProjectCard from '../components/ProjectCard';\nimport Header from '../components/Header';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport axios from 'axios';\n\n/* \n Esse são objetos fake simulando um dado que vem direto do banco\n Quando fizermos a request para listar os projetos iremos \n receber um json vindo da API com um formato similar\n*/\nconst projectsFake = [\n  {\n    projectId: '1',\n    name: 'Ifood App',\n    description: 'simple app',\n    contributors: ['gilvandro', '4235', '454'],\n    managers: ['admin'],\n    started: '10/02/2019',\n    finish: '10/12/2019',\n    imageUrl: 'https://specials-images.forbesimg.com/imageserve/5db9cc76d85e3000078fb931/960x0.jpg?fit=scale',\n  },\n  {\n    projectId: '2',\n    name: 'Desktop App',\n    contributors: ['8989', '44'],\n    description: 'simple software',\n    managers: ['admin'],\n    started: '11/06/2019',\n    finish: '11/10/2019',\n    imageUrl: 'https://www.clicdata.com/wp-content/uploads/2019/06/example-dashboard-014-1.png',\n  }, \n  {\n    projectId: '3',\n    name: 'Web site',\n    contributors: ['8989', '44'],\n    description: 'simple software',\n    managers: ['admin'],\n    started: '11/06/2019',\n    finish: '11/10/2019',\n    imageUrl: 'https://www.clicdata.com/wp-content/uploads/2019/06/example-dashboard-014-1.png',\n  }\n];\n\nconst fetchProjects = (url) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(projectsFake);\n    }, 500);\n  });\n}\n\n// Component que representa a página por complete\n// Ele está na pasta de containers pois é uma nomenclatura que \n// o pessoal usa, poderia ser /pages/Home.js  /screens/Home.js\nclass Home extends React.Component { \n  constructor(props) {\n    super(props);\n    // O estado inicial do component o valor default que inicializa com um array vazio\n    // quando carregarmos nossa página e fizermos uma request iremos \n    // atualizar esse estado pois quando atualizamos um estado de um component react\n    // automaticamente o método render irá ser atualizado\n    // ele começa vazio se alguem atualiza o estado a parte do template é atualizada diretamente\n    this.state = {\n      projects: [],\n    };\n  }\n\n  /*\n   esse método é um método do lifecylce de um componente react\n   após nossa página carregar faça uma request\n   atualize o state com os projetso que estamos listando que estão chegando na request\n  */\n  componentDidMount() {\n    /* \n      usamos o uma função fake que simula o axios que é uma lib que faz request\n      teremos que usar axios para fazere request aqui dessa forma\n      axios.get('https://minhaapi.com/api/v2/projects')\n        .then(response => {\n          this.setProject(response);\n        }).catch((e) => {\n        // caso a request dê errado apareça erro\n        console.log('-->>', e)\n      });\n\n       axios para fazer request ele retorna uma promise\n      axios é uma lib que nos ajuda a fazer request simples até mais complexas\n    */\n    fetchProjects('https://minhaapi.com/api/v2/projects')\n    .then(response => {\n      const me = store.get('logged-user');\n      /* \n        como não temos API estamos fazendo no frontend uma filtragem caso o user seja admin ele\n        pode ver todos\n        caso não seja admi ele pode ver apenas o projeto onde ele é contribuidor\n\n        essa lógica pode ser feita no backend o cara poe fazer um query,\n        podemos passar o username do user logado e no backend fica essa lógica\n        mas para facilitar no frontend podemos fazer já que é um protótipo\n      */\n      if (me !== 'admin') {\n        const filteredData = response.filter(p => {\n          return p.contributors.includes(me);\n        });\n        this.setProject(filteredData);\n      } else {\n        this.setProject(response);\n      }\n    })\n    .catch((e) => {\n      // caso a request dê errado apareça erro\n      console.log('-->>', e)\n    });\n  }\n\n  /* \n    atualiza o estado da página home\n    logo em seguida os projetos são listados no método render\n  */\n  setProject = (projects) => {\n    this.setState({\n      projects,\n    });\n  }\n\n  /*\n    é usado para fazer redirect para um projeto em especifico\n  */\n  redirect = (projectId) => () => {\n    this.props.history.push(`/project/${projectId}`);\n  };\n\n  /* faz logout do cara, redirectiona para fora e apaga as credenciais dele */\n  logout = () => {\n    store.set('logged-token', '');\n    store.get('logged-user', '');\n    this.props.history.push('/');\n  }\n\n  /*\n    faz a chamada do component Header passando um callback logout para quando clicarem lá no componentn Header\n    redirecionar para fora e limpar as credenciais\n\n    Container é um componente que centraliza e dentro dele tem a listagem com cada card\n    ProjectCard é o card que recebe os dados do projeto e exibe o titulo, imagem, participantes, descição\n    data de entrega do projeto\n  */\n  render() {\n    return(\n      <div>\n        <CssBaseline />\n        <Header logout={this.logout} />\n        <Container maxWidth=\"sm\" className=\"home-container\">\n          <div className=\"card-wrapper\">\n            {this.state.projects.map((project) => {\n              return <ProjectCard {...project} redirect={this.redirect} />\n            })}\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\n/**\n * exportamos para quem quiser importar ver esse component\n * estamos importando  ele em App.js que é onde tem as rotas configuradas\n */\nexport default Home;"]},"metadata":{},"sourceType":"module"}